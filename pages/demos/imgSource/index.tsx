import ImgUpload from "@/components/ImgUpload"
import SVGIcon from "@/components/SVGIcon"
import { Pic } from "@/types/demos"
import { stone } from "@/utils/global"
import Head from "next/head"
import { useEffect, useRef, useState } from "react"
import UploadPicList, { RefType } from "@/components/Demos/ImgSource/PicList"
import PicModal, { ModalRefType } from "@/components/PicModal"
import { queryPic } from "@/req/demos"
import { useMobile, parsequeryStr2Obj } from "@/utils/common"
import style from './index.module.scss'

export default function ImgSource() {
    const [personal, setPersonal] = useState(false)
    const [isOwner, setOwner] = useState(false)
    const [showUpload, uploadShow] = useState(false)
    const commonRef = useRef<RefType>(null)
    const privateRef = useRef<RefType>(null)
    const mobile = useMobile()
    const curPersonal = useRef(false)
    const picRef = useRef<ModalRefType | null>(null)
    const afterUpload = async () => {
        if (curPersonal.current) {
            privateRef.current?.afterUpload()
        } else {
            commonRef.current?.afterUpload()
        }
    }
    const onStartUpload = () => {
        curPersonal.current = personal
    }
    const openSwiper = (items: Partial<Pic>[], ind: number, upload = false) => {
        uploadShow(upload)
        picRef.current?.open(items, ind)
    }
    const uploadPreview = (items: Partial<Pic>[], ind: number) => {
        openSwiper(items, ind, true)
    }
    const PreviewBeforeLoad = async (src: string) => {
        let realSrc = src
        if (personal) {
            const { data } = await queryPic(parsequeryStr2Obj(src).url.replace('cdn.jsdelivr.net/gh/mirrows/private@main/', ''), 'private')
            realSrc = data?.content ? `data:image/${data.name.split('.').reverse()[0]};base64,${data?.content || ''}` : data.download_url || src
        }
        return realSrc
    }
    useEffect(() => {
        stone.isGithubOwner((isowner) => setOwner(isowner))
    }, [])
    return (<>
        <Head>
            <title>延迟图床</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <main>
            <div className={`${style['img_sorce_wrap']}`}>
                <ImgUpload
                    className={style['uploader_wrap']}
                    personal={personal}
                    onFinish={afterUpload}
                    onStartUpload={onStartUpload}
                >
                    <div>
                        <SVGIcon width="32" style={{ fill: 'gray' }} type="plus_no_outline" />
                    </div>
                </ImgUpload>
                {isOwner && <div className={style['switch_wrap']}>
                    <button className={`${style['switch_btn']}${personal ? '' : ' active'}`} onClick={() => setPersonal(false)}>COMMON</button>
                    <button className={`${style['switch_btn']}${personal ? ' active' : ''}`} onClick={() => setPersonal(true)}>PRIVATE</button>
                </div>}
                <UploadPicList ref={commonRef} show={!personal} className={personal ? 'hide' : ''} onPreview={openSwiper} />
                {isOwner && <UploadPicList ref={privateRef} mode="private" show={!!personal} className={personal ? '' : 'hide'} onPreview={openSwiper} />}

                <PicModal
                    ref={picRef}
                    slice={!showUpload}
                    beforeLoad={PreviewBeforeLoad}
                />
            </div>

        </main>
    </>)
}

export const getStaticProps = async (context: any) => {
    return {
        props: {}
    }
}

