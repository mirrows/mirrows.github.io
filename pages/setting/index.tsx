import Head from 'next/head'
// import Link from 'next/link'
// import { useRouter } from 'next/router'

import style from './index.module.scss'
import { stone } from '@/utils/global'
import { useEffect, useRef, useState } from 'react'
import Modal, { ModalRef } from '@/components/Modal'
import { setShadowsockConfig } from '@/req/personal'



const useShadowsockEvent = () => {
  const shadowsockModal = useRef<ModalRef>(null);
  const [host, setHost] = useState('');
  const [password, setPassword] = useState('');
  const [port, setPort] = useState('');
  const [method, setMethod] = useState('');
  const changeShadowsockConfig = () => {
    const params = {
      config: {
          host,
          port: 22,
          username: 'root',
          password,
      },
      port: +port,
      method,
  }
    console.log(params);
    setShadowsockConfig(params).then(res => {
      if (res.code) return alert(res.msg);
      shadowsockModal.current?.close();
    }).catch(err => alert(err));
  }
  return <>
    <button className='normal_btn' onClick={() => shadowsockModal.current?.open()}>shadowsock端口更换</button>
    <Modal ref={shadowsockModal}>
      <div className={style['shadowsock_wrap']}>
        <div className={style['shadowsock_item']}>
          <span className={style['shadowsock_key']}>host: </span>
          <input type="text" className={style['shadowsock_input']} value={host} onInput={(e) => setHost((e.target as HTMLInputElement).value)} />
        </div>
        <div className={style['shadowsock_item']}>
          <span className={style['shadowsock_key']}>password: </span>
          <input type="password" className={style['shadowsock_input']} value={password} onInput={(e) => setPassword((e.target as HTMLInputElement).value)} />
        </div>
        <div className={style['shadowsock_item']}>
          <span className={style['shadowsock_key']}>port: </span>
          <input type="text" className={style['shadowsock_input']} value={port} onInput={(e) => setPort((e.target as HTMLInputElement).value)} />
        </div>
        <div className={style['shadowsock_item']}>
          <span className={style['shadowsock_key']}>method: </span>
          <input type="text" className={style['shadowsock_input']} value={method} onInput={(e) => setMethod((e.target as HTMLInputElement).value)} />
        </div>
        <div className={style['footer']}>
          <button className='outlined_btn' onClick={() => shadowsockModal.current?.close()}>cancel</button>
          <button className='normal_btn' onClick={changeShadowsockConfig}>confirm</button>
        </div>
      </div>
    </Modal>
  </>
}

export default function Setting() {
  // const router = useRouter()
  const [isOwner, setOwner] = useState(false)
  useEffect(() => {
    stone.isGithubOwner((isowner) => setOwner(isowner))
  }, [])
  const content = <>
    <div className={style['setting_bg']}>
      <div className={style['setting_wrap']}>
        <h2>私人脚本集成</h2>
        {useShadowsockEvent()}
      </div>
    </div>
    
  </>
  const noAuth = <>
    <img className={style['img']} width="800" height="600" src='https://empty.t-n.top/pub_lic/2023_07_06/pic1688608901221777.gif' alt="404" />
  </>
  return (
    <>
      <Head>
        <title>Settings</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {isOwner ? content : noAuth}
      </main>
    </>
  )
}

export const getStaticProps = async (context: any) => {
  return {
    props: {}
  }
}
